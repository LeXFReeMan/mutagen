<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Synchronization on Mutagen</title><link>https://mutagen.io/documentation/synchronization/</link><description>Recent content in Synchronization on Mutagen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2016 – 2019 Mutagen IO, Inc.</copyright><atom:link href="https://mutagen.io/documentation/synchronization/index.xml" rel="self" type="application/rss+xml"/><item><title>Ignores</title><link>https://mutagen.io/documentation/synchronization/ignores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/ignores/</guid><description>Ignores By default, Mutagen attempts to propagate all files that it sees within a synchronization root. This isn&amp;rsquo;t always desirable, so Mutagen supports ignoring paths within a synchronization root and excluding them from synchronization. When a path is ignored, it won&amp;rsquo;t be scanned, it won&amp;rsquo;t be propagated, and it won&amp;rsquo;t be deleted.
Mutagen allows ignores to be specified on both a default and per-session basis, and provides utilities for ignoring certain kinds of common directories.</description></item><item><title>Permissions</title><link>https://mutagen.io/documentation/synchronization/permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/permissions/</guid><description>Permissions Mutagen&amp;rsquo;s permission synchronization model is designed around portability and development work. Unlike many synchronization systems, Mutagen does not propagate raw file ownership or permissions. Doing so is neither well-defined nor safe in general. Instead, the only permission that Mutagen propagates is POSIX executability. For any other files that Mutagen propagates or updates, ownership and permissions are set using explicit configuration parameters. Permissions for any other files in a synchronization root are left untouched by Mutagen.</description></item><item><title>Probing and scanning</title><link>https://mutagen.io/documentation/synchronization/probing-and-scanning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/probing-and-scanning/</guid><description>Probing and scanning On each synchronization cycle, Mutagen endpoints are probed for filesystem behavior and scanned to create a snapshot of synchronization root contents. In both cases, Mutagen can perform the operation in a variety of different ways. While the default behavior will be satisfactory for the vast majority of users, there are certain cases (outlined below) where users may wish to adjust Mutagen&amp;rsquo;s default behavior.
Probing Filesystem probing is used to determine certain filesystem behaviors that need to be understood in order to correctly synchronize files between different systems.</description></item><item><title>Safety mechanisms</title><link>https://mutagen.io/documentation/synchronization/safety-mechanisms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/safety-mechanisms/</guid><description>Safety mechanisms Mutagen has two best-effort safety mechanisms aimed at avoiding unintentional synchronization root deletion or replacement. Each of these mechanisms detects an &amp;ldquo;irregular&amp;rdquo; condition during synchronization and halts the synchronization cycle until the user confirms that the condition is intentional.
In both cases, the user is required to delete the synchronization root on the side to which the deletion or replacement should propagate, and then use mutagen sync resume to continue synchronization for the session.</description></item><item><title>Size limits</title><link>https://mutagen.io/documentation/synchronization/size-limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/size-limits/</guid><description>Size limits Mutagen has two session configuration parameters to limit synchronization disk usage.
Maximum staging file size The maximum file size that Mutagen will allow to be staged (transferred) can be set on a per-session basis by passing the --max-staging-file-size=&amp;lt;size&amp;gt; flag to the mutagen sync create command. This limit can be set on a default per-session basis by including the following in ~/mutagen.yml:
sync: defaults: maxStagingFileSize: &amp;lt;size&amp;gt; Size specifications can be provided as a numeric value representing byte count or as a string using human-friendly units (e.</description></item><item><title>Staging</title><link>https://mutagen.io/documentation/synchronization/staging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/staging/</guid><description>Staging When transferring files to an endpoint, Mutagen first stages them in a temporary directory so that they can be atomically relocated into place. By default, these files are staged in the Mutagen data directory (~/.mutagen), which works well for most synchronization root locations and keeps staged files consolidated in a single location. However, in cases where the synchronization root resides on a different filesystem than the user&amp;rsquo;s home directory, staging files in the Mutagen data directory incurs an additional copy operation to transition them into place.</description></item><item><title>Symbolic links</title><link>https://mutagen.io/documentation/synchronization/symbolic-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/symbolic-links/</guid><description>Symbolic links Mutagen has full support for symbolic links on both POSIX and Windows systems. Because POSIX and Windows platforms have different symbolic link implementations and interpretations, Mutagen provides a few different symbolic link synchronization modes aimed at providing maximum compatibility:
ignore: In this mode, Mutagen simply ignores any symbolic links that it encounters within a synchronization root. This means that it won&amp;rsquo;t propagate them and it won&amp;rsquo;t delete them.</description></item><item><title>Version control systems</title><link>https://mutagen.io/documentation/synchronization/version-control-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/version-control-systems/</guid><description>Version control systems Mutagen is designed to work in tandem with version control systems (VCSs), allowing you to, e.g., clone and edit a project while mirroring it to a remote system and testing it as your make edits. This helps you to avoid needing a push/pull cycle every time you make a change that you want to test.
When using Mutagen with a VCS repository, there are a few &amp;ldquo;best practices&amp;rdquo; of which you should be aware.</description></item><item><title>Watching</title><link>https://mutagen.io/documentation/synchronization/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mutagen.io/documentation/synchronization/watching/</guid><description>Watching Mutagen uses filesystem watching to know when it should scan for and propagate changes. Unfortunately, the filesystem watching landscape is extremely varied in terms of implementation, efficiency, and robustness. Almost every platform uses a completely different mechanism, many of which are unreliable or non-scalable.
Some systems (namely macOS and Windows) provide native recursive watching mechanisms that can monitor arbitrarily large directory hierarchies, though their behavior when the location being watched is deleted or changed is somewhat inconsistent, and Windows only supports using a directory as the root of such a recursive watch.</description></item></channel></rss>