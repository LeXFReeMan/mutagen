syntax = "proto3";

package forwarding;

option go_package = "github.com/mutagen-io/mutagen/pkg/service/forwarding";

import "selection/selection.proto";
import "forwarding/configuration.proto";
import "forwarding/state.proto";
import "url/url.proto";

// CreationSpecification contains the metadata required for a new session.
message CreationSpecification {
    // Source is the source endpoint URL for the session.
    url.URL source = 1;
    // Destination is the destination endpoint URL for the session.
    url.URL destination = 2;
    // Configuration is the base session configuration. It is the result of
    // merging the global configuration (unless disabled), any manually
    // specified configuration file, and any command line configuration
    // parameters.
    forwarding.Configuration configuration = 3;
    // ConfigurationSource is the source-specific session configuration. It is
    // determined based on command line configuration parameters.
    forwarding.Configuration configurationSource = 4;
    // ConfigurationDestination is the destination-specific session
    // configuration. It is determined based on command line configuration
    // parameters.
    forwarding.Configuration configurationDestination = 5;
    // Name is the name for the session object.
    string name = 6;
    // Labels are the labels for the session object.
    map<string, string> labels = 7;
    // Paused indicates whether or not to create the session pre-paused.
    bool paused = 8;
}

// CreateRequest encodes a request for session creation.
message CreateRequest {
    // Prompter is the prompter identifier to use for creating sessions.
    string prompter = 1;
    // Specification is the creation specification.
    CreationSpecification specification = 2;
}

// CreateResponse encodes a session creation response.
message CreateResponse {
    // Session is the resulting session identifier.
    string session = 1;
}

// ListRequest encodes a request for session metadata.
message ListRequest {
    // Selection is the session selection criteria.
    selection.Selection selection = 1;
    // PreviousStateIndex is the previously seen state index. 0 may be provided
    // to force an immediate state listing.
    uint64 previousStateIndex = 2;
}

// ListResponse encodes session metadata.
message ListResponse {
    // StateIndex is the state index associated with the session metadata.
    uint64 stateIndex = 1;
    // SessionStates are the session metadata states.
    repeated forwarding.State sessionStates = 2;
}

// PauseRequest encodes a request to pause sessions.
message PauseRequest {
    // Prompter is the prompter to use for status message updates.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// PauseResponse indicates completion of pause operation(s).
message PauseResponse{}

// ResumeRequest encodes a request to resume sessions.
message ResumeRequest {
    // Prompter is the prompter identifier to use for resuming sessions.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// ResumeResponse indicates completion of resume operation(s).
message ResumeResponse{}

// TerminateRequest encodes a request to terminate sessions.
message TerminateRequest {
    // Prompter is the prompter to use for status message updates.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// TerminateResponse indicates completion of termination operation(s).
message TerminateResponse{}

// Forwarding manages the lifecycle of forwarding sessions.
service Forwarding {
    // Create creates a new session.
    rpc Create(CreateRequest) returns (CreateResponse) {}
    // List returns metadata for existing sessions.
    rpc List(ListRequest) returns (ListResponse) {}
    // Pause pauses sessions.
    rpc Pause(PauseRequest) returns (PauseResponse) {}
    // Resume resumes paused or disconnected sessions.
    rpc Resume(ResumeRequest) returns (ResumeResponse) {}
    // Terminate terminates sessions.
    rpc Terminate(TerminateRequest) returns (TerminateResponse) {}
}
